type User {
    id: ID!
    username: String,
    avatar: String,
    color: String,
    isOnline: Boolean,
}

type Avatar {
    nameOnDisc: String,
    extension: String,
}

type LoginResponse {
    status: Boolean!,
    userId: String,
}

type Folder {
    name: String,
    path: String,
    contains: [FolderContent]
    hash: String,
    type: String,
    hashPath: [String]!
}

type Image {
    name: String,
    path: String,
    hash: String,
    width: Int,
    height: Int,
    sizeInMb: Float,
    parentHash: String,
    type: String,
    extension: String,
}

type Video {
    name: String,
    path: String,
    hash: String,
    parentHash: String,
    type: String,
    extension: String,
}

union FolderContent = Folder | Image | Video

type CommentPayload {
    text: String,
    userId: String,
    id: String,
    date: String,
}

input CommentInput {
    text: String,
    userId: String,
}

type CommentFlow {
    comments: [CommentPayload]!,
    belongsTo: String!,
}

type TagFlow {
    tagPrimitives: [TagPrimitive]!
    belongsTo: String!
}

type FileLookup {
    hash: String!,
    type: String!,
}

input FileLookupInput {
    hash: String!,
    type: String!, 
}

interface TagBody {
    name: String!,
    userId: String!,
}

type TagPrimitive implements TagBody {
    name: String!,
    userId: String!,
}

type Tag implements TagBody {
    name: String!
    fileReferences: [FileLookup]!,
    userId: String!,
}

input ChatMessageInput {
    userId: ID!,
    message: String,
    date: String,
}

input UserTypeInput {
    id: ID!
    username: String,
    avatar: String,
    color: String,
    isOnline: Boolean,
}

type ChatMessage {
    userId: ID!,
    message: String,
    date: String,
}

type Query {
    usersStatus: [User]!
    getChatMessages(offset: Int): [ChatMessage]
    availableAvatars: [Avatar]
    getFolderContent(hash: String!): Folder
    getImage(hash: String!): Image
    getCommentFlow(fileHash: String!): CommentFlow
    getTagFlow(fileHash: String!): TagFlow
    availableTags: [Tag]
    getTagContent(tagName: String!): [FolderContent]
}

type Mutation {
    login(email: String!, password: String!): LoginResponse!
    changePassword(userId: ID!, oldPassword: String, newPassword: String): Boolean!
    updateStatus(user: UserTypeInput): User
    addChatMessage(chatMessage: ChatMessageInput!): ChatMessage
    updateCommentFlow(fileHash: String!, comment: CommentInput!): CommentFlow!
    updateTagFlow(fileLookup: FileLookupInput, tags: [String]!, userId: String!): TagFlow!
}

type Subscription {
    chatMessageAdded: ChatMessage!
    userUpdated: User!
    newCommentAddedToFile(fileHash: String!): CommentPayload!
    newTagsAddedToFile(fileHash: String!): [TagPrimitive]!
}
